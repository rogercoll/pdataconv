{%- macro smart_title_case(text) -%}
{%- for i in range(0, text | length) -%}
    {%- if i == 0 or text[i-1] in ['.', '_'] -%}
        {{ text[i] | upper }}
    {%- elif not text[i] in ['.', '_'] -%}
        {{ text[i] }}
    {%- endif -%}
{%- endfor -%}
{%- endmacro -%}
package metadata

import (
    "go.opentelemetry.io/collector/confmap"
)

// DO NOT MODIFY: This code is autogenerated.
// See templates/registry/metadata/resource_config.go.j2.

// ResourceAttributeConfig provides common config for a particular resource attribute.
type ResourceAttributeConfig struct {
	Enabled bool `mapstructure:"enabled"`
	{% if ctx.metrics %}
		// Experimental: MetricsInclude defines a list of filters for attribute values.
		// If the list is not empty, only metrics with matching resource attribute values will be emitted.
		MetricsInclude []filter.Config `mapstructure:"metrics_include"`
		// Experimental: MetricsExclude defines a list of filters for attribute values.
		// If the list is not empty, metrics with matching resource attribute values will not be emitted.
		// MetricsInclude has higher priority than MetricsExclude.
		MetricsExclude []filter.Config `mapstructure:"metrics_exclude"`
	{% endif %}

	enabledSetByUser bool
}

func (rac *ResourceAttributeConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(rac)
	if err != nil {
		return err
	}
	rac.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// ResourceAttributesConfig provides config for resource attributes.
type ResourceAttributesConfig struct {
	{% for attributes_root_namespace in ctx %}
		{% for attr in attributes_root_namespace.attributes %}
		{{ smart_title_case(attr.name) }} ResourceAttributeConfig `mapstructure:"{{ attr.name }}"`
		{% endfor %}
	{% endfor %}
}

{# Map requirement_level strings to Enabled boolean #}
{% set enable_map = {
  "required": true,
  "conditionally_required": false,
  "recommended": false,
  "opt_in": false
} %}

func DefaultResourceAttributesConfig() ResourceAttributesConfig {
	return ResourceAttributesConfig{
		{% for attribute_group in ctx %}
			{% for attr in attribute_group.attributes %}
				{{ smart_title_case(attr.name) }}: ResourceAttributeConfig {
					Enabled: {{ enable_map.get(attr.requirement_level or "recommended") }},
				},
			{% endfor %}
		{% endfor %}
	}
}
