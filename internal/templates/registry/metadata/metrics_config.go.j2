{%- macro smart_title_case(text) -%}
{%- for i in range(0, text | length) -%}
    {%- if i == 0 or text[i-1] in ['.', '_'] -%}
        {{ text[i] | upper }}
    {%- elif not text[i] in ['.', '_'] -%}
        {{ text[i] }}
    {%- endif -%}
{%- endfor -%}
{%- endmacro -%}

package metadata

import (
    "go.opentelemetry.io/collector/confmap"
)

// DO NOT MODIFY: This code is autogenerated.
// See templates/registry/go/metric_config.go.j2.

// MetricConfig provides common config for a particular metric.
type MetricConfig struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms)
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsConfig provides config for metrics.
type MetricsConfig struct {
	{% for metric in ctx %}
	{% set metric_name = smart_title_case(metric.metric_name) %}
	{{ metric_name }} MetricConfig `mapstructure:"{{ metric.metric_name }}"`
	{% endfor %}
}

{# Map requirement_level strings to Enabled boolean #}
{% set enable_map = {
  "required": true,
  "conditionally_required": false,
  "recommended": false,
  "opt_in": false
} %}

func DefaultMetricsConfig() MetricsConfig {
	return MetricsConfig{
		{% for metric in ctx %}
		{{ smart_title_case(metric.metric_name) }}: MetricConfig{
			{# Emit Enabled field using requirement_level, defaulting to 'recommended' if missing #}
			Enabled: {{ enable_map.get(metric.requirement_level or "recommended") }},
		},
		{% endfor %}
	}
}
