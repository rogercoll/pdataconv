package metadata

import (
	"context"

	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/metric"
)

// DO NOT MODIFY: This code is autogenerated.
// See templates/registry/go/metric.go.j2.

// This is used as a helper for all optional attributes.
type attr struct {
	kv attribute.KeyValue
}

func (a attr) attr() attribute.KeyValue {
	return a.kv
}

type AuctionBidCountAttr interface {
	attr() attribute.KeyValue
}

// An instrument for recording `auction.bid.count`
type AuctionBidCount struct {
	inst metric.Float64Counter
}

// Construct a new instrument for measuring `auction.bid.count`
func NewAuctionBidCount(m metric.Meter) (AuctionBidCount, error) {
	i, err := m.Float64Counter(
		"auction.bid.count",
		metric.WithDescription("Count of all bids we've seen"),
		metric.WithUnit("{bid}"),
	)
	if err != nil {
		return AuctionBidCount{}, err
	}
	return AuctionBidCount{i}, nil
}

func auctionBidCountAttrToAttrs(in []AuctionBidCountAttr) []attribute.KeyValue {
	out := make([]attribute.KeyValue, len(in))
	for i, a := range in {
		out[i] = a.attr()
	}
	return out
}

// Adds an increment to the existing count.
func (m AuctionBidCount) Add(
	ctx context.Context,
	inc float64,

	// The id of the auction.
	auctionId int,

	optAttrs ...AuctionBidCountAttr,

) {

	m.inst.Add(ctx, inc, metric.WithAttributes(

		append(auctionBidCountAttrToAttrs(optAttrs),

			attribute.Int("auction.id", auctionId),
		)...,
	))
}

func AuctionName(auctionName string) AuctionBidCountAttr {
	return attr{attribute.String("auction.name", auctionName)}
}
